basePath: /api
definitions:
  dto.PaginationData:
    properties:
      page:
        type: integer
      size:
        type: integer
      total:
        type: integer
      totalPages:
        type: integer
    type: object
  dto.PaginationResponse:
    properties:
      content: {}
      pagination:
        $ref: '#/definitions/dto.PaginationData'
    type: object
  dto.Response:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  request.CreateEventDto:
    properties:
      location:
        type: string
      name:
        type: string
      postalCode:
        type: string
      proposedDates:
        items:
          type: string
        type: array
      vendorId:
        type: string
    type: object
  request.EventApprovalDto:
    properties:
      confirmedDate:
        type: string
      remarks:
        type: string
      status:
        type: string
    type: object
  request.LoginDto:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  response.EventDetailResponse:
    properties:
      confirmedDate:
        type: string
      createdAt:
        type: string
      fullLocation:
        type: string
      id:
        type: string
      locationPostalCode:
        type: string
      name:
        type: string
      proposedDates:
        items:
          type: string
        type: array
      remarks:
        type: string
      status:
        type: string
      vendorName:
        type: string
    type: object
  response.EventResponse:
    properties:
      confirmedDate:
        type: string
      createdAt:
        type: string
      id:
        type: string
      name:
        type: string
      proposedDates:
        items:
          type: string
        type: array
      status:
        type: string
      vendorName:
        type: string
    type: object
  response.LoginResponse:
    properties:
      token:
        type: string
    type: object
  response.VendorsResponse:
    properties:
      fullName:
        type: string
      id:
        type: string
    type: object
host: localhost:5000
info:
  contact:
    email: support@swagger.io
    name: Sutanto Adi Nugroho
    url: http://www.swagger.io/support
  description: API to manage events including Creation and Approval.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Event Management System API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login with username and password to obtain authentication token
      parameters:
      - description: User login credentials
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.LoginDto'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            allOf:
            - $ref: '#/definitions/dto.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.LoginResponse'
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.Response'
      summary: User login
      tags:
      - Authentication
  /event:
    post:
      consumes:
      - application/json
      description: Create a new event with the provided details
      parameters:
      - description: Bearer <your-token-here>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Event data. Propose date format should be ['dd-mm-yyyy', 'dd-mm-yyyy']
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.CreateEventDto'
      produces:
      - application/json
      responses:
        "201":
          description: Event created successfully
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: 'Bad request: Missing required fields'
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Create a new event
      tags:
      - Event
  /event/{eventId}:
    get:
      consumes:
      - application/json
      description: Get the details of a specific event by its ID
      parameters:
      - description: Bearer <your-token-here>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Event ID
        in: path
        name: eventId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Event details retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.EventDetailResponse'
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Get event details by ID
      tags:
      - Event
  /event/{eventId}/approval:
    put:
      consumes:
      - application/json
      description: Approve or reject an event by changing its status
      parameters:
      - description: Bearer <your-token-here>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Event ID
        in: path
        name: eventId
        required: true
        type: string
      - description: Approval data. Status should be 'Approved' or 'Rejected'
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.EventApprovalDto'
      produces:
      - application/json
      responses:
        "200":
          description: Event status updated successfully
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: 'Bad request: Invalid status'
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Update the approval status of an event
      tags:
      - Event
  /event/by-user/{userId}:
    get:
      consumes:
      - application/json
      description: Get the list of events that a user is involved in, with pagination
      parameters:
      - description: Bearer <your-token-here>
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: size
        type: integer
      - description: Event name filter
        in: query
        name: name
        type: string
      - description: Event status filter
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Events retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.Response'
            - properties:
                data:
                  allOf:
                  - $ref: '#/definitions/dto.PaginationResponse'
                  - properties:
                      content:
                        items:
                          $ref: '#/definitions/response.EventResponse'
                        type: array
                    type: object
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Show events by user involvement
      tags:
      - Event
  /user/vendors:
    get:
      consumes:
      - application/json
      description: Retrieve the list of all vendors, optionally filtered by full name
      parameters:
      - description: Bearer <your-token-here>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Filter vendors by full name
        in: query
        name: fullName
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Vendors retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.VendorsResponse'
                  type: array
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - BearerAuth: []
      summary: Get all vendors
      tags:
      - User
swagger: "2.0"
